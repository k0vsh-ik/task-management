AWSTemplateFormatVersion: '2010-09-09'
Description: Task Management System Infrastructure (LocalStack)

Resources:

  TaskFrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: task-frontend-bucket

  TaskBackendLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: task-backend-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - s3:GetObject
                Resource: "*"

  TaskBackendPythonLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: task-backend-python-lambda
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Role: !GetAtt TaskBackendLambdaRole.Arn
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': 'Hello from Python Lambda!'
              }

  TaskBackendRustLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: task-backend-rust-lambda
      Runtime: provided.al2
      Handler: bootstrap
      Role: !GetAtt TaskBackendLambdaRole.Arn
      Code:
        S3Bucket: placeholder-bucket
        S3Key: placeholder.zip

Outputs:
  FrontendBucketName:
    Value: !Ref TaskFrontendBucket
  PythonLambdaName:
    Value: !Ref TaskBackendPythonLambda
  RustLambdaName:
    Value: !Ref TaskBackendRustLambda
